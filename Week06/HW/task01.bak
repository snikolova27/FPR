#lang racket
(require racket/trace)

(define (where xs preds)
  (define (helper result left-pred)
    (cond
      [(null? left-pred) result]
      [else (helper (filter (car left-pred) result) (cdr left-pred))]
    )
  )
  ;(trace helper)
  (helper xs preds)

)
(where '(3 4 5 6 7 8 9 10) (list even? (lambda (x) (> x 5))))
(equal? (where '(3 4 5 6 7 8 9 10) (list even? (lambda (x) (> x 5)))) '(6 8 10)) ; all even numbers greater than 5
(equal? (where '(3 4 5 7) (list even? (lambda (x) (> x 5)))) '()) ; no numbers are even and greater than 5
(equal? (where '() (list odd? (位 (x) (> x 3)) (位 (x) (< x 20)))) '())
(equal? (where '(1 2 3 4 5 6 7 8 9 10 11 13 15) (list odd? (位 (x) (> x 3)) (位 (x) (< x 20)))) '(5 7 9 11 13 15))