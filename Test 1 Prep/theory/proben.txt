#lang racket
(define (factorial n)
	(define (helper current res)
		(if (zero? current) 
		res
    		(helper (sub1 current) (* res current))
)
)
(helper n 1)
)
(factorial 2)
(factorial 5)

(define (scons a ll) 
(map  (lambda (lst) (append (list a) lst ))ll)
)
(scons 8 '((1 2) (2 4)))
(cdr (cadr '((a (b)) ((c (d)) e))))
(cons '(a b) (list 'c '((d) e)))
(caddr '((a b) c ((d) e)))
(cdr  '((a b) c ((d) e)))
(cdr '(c ((d) e)))
(car '(((d) e)))
(append '(a (b c)) (caddr '((a b) c ((d) e))))
(list '(a b) (list '(c d)))


(map length
 	(map (lambda (x)
               (cond [(not (pair? x)) (list x)]
                     [(null? (cdr x)) x]
                     [else (cdr x)])
              )
 '((2 3 4) (8 5) 6 (7 1 â€“1 5) (1))
         )
)
#|
( (3 4) (5) (6) (1 -1 5) (1))
map lenght na gornoto ^
2 1 1 3 1
|#
