#lang racket
(define (cnt-occurrences x xs)
  (define (helper cnt left-over)
    (cond
      [(null? left-over) cnt]
      [(= x (car left-over)) (helper (add1 cnt) (cdr left-over))]
      [else (helper cnt (cdr left-over))]
    )
  )
  (helper 0 xs)
)

(define (triangular? mat)
  (define (helper left-over current-row))
)

(equal? (triangular '( (1 2 3)
                       (0 5 6)
                       (0 0 9))) #t)

(equal? (triangular '( (0 2 3)
                       (1 5 6)
                       (1 0 0))) #f)

(equal? (triangular '( (1 2 3)
                       (1 5 6)
                       (0 0 9))) #f)

(equal? (triangular '( (1 2 3 4)
                       (0 5 6 7)
                       (0 0 8 9)
                       (0 0 0 9))) #t)